# -*- coding: utf-8 -*-
"""Model Training.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Us5CUhDKSMWHQ-hn1oPN4IvKlDuPsv0m

# **Setup and Data**
"""

# Install required libraries
!pip install yfinance pandas matplotlib ta --quiet

import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt

# Download SPY 1-year daily data
ticker = "SPY"
data = yf.download(ticker, period="1y", interval="1d")

# Reset index to make date a column
data.reset_index(inplace=True)

# Show first 5 rows
data.head()

"""# **Feature Engineering**"""

import pandas as pd
import numpy as np
from ta.trend import EMAIndicator, MACD
from ta.momentum import RSIIndicator, AwesomeOscillatorIndicator
from ta.volatility import AverageTrueRange

# Copy only necessary columns as clean Series (no 2D shapes)
df = pd.DataFrame()
df['Date'] = data['Date']
df['Open'] = data['Open'].astype(float)
df['High'] = data['High'].astype(float)
df['Low'] = data['Low'].astype(float)
df['Close'] = data['Close'].astype(float)
df['Volume'] = data['Volume'].astype(float)

# Now calculate the 5 indicators safely
df['EMA20'] = EMAIndicator(close=df['Close'], window=20).ema_indicator()
df['MACD'] = MACD(close=df['Close']).macd()
df['MOM_6'] = AwesomeOscillatorIndicator(high=df['High'], low=df['Low']).awesome_oscillator()
df['RSI'] = RSIIndicator(close=df['Close'], window=14).rsi()
df['ATR'] = AverageTrueRange(high=df['High'], low=df['Low'], close=df['Close'], window=14).average_true_range()

# Drop NaN rows from rolling indicators
df.dropna(inplace=True)

# Show a preview
df[['Date', 'Close', 'EMA20', 'MACD', 'MOM_6', 'RSI', 'ATR']].head()

"""# **Slope-Detection Labeling**"""

K = 3  # As shown in paper's Figure 1

# Calculate averages and std dev (Equation 1 in paper)
df['past_avg'] = df['Close'].rolling(window=K).mean().shift(1)
df['future_avg'] = df['Close'].shift(-K).rolling(window=K).mean()
df['mu'] = df[['past_avg', 'future_avg']].mean(axis=1)
df['sigma'] = df['Close'].rolling(window=2*K).std()  # Standard deviation threshold

# Slope calculation (Î´ in paper)
df['slope'] = df['future_avg'] - df['past_avg']

# 4-class labeling (Table I in paper)
conditions = [
    (df['Close'] > (df['mu'] + df['sigma'])) & (df['slope'] > 0),  # rise plus
    (df['slope'] > 0),                                              # rise
    (df['slope'] < 0),                                              # fall
    (df['Close'] < (df['mu'] - df['sigma'])) & (df['slope'] < 0)    # fall plus
]
choices = [3, 2, 1, 0]  # Encoded as integers
df['label'] = np.select(conditions, choices, default=2)  # Default to "rise"

"""# **Model Training**"""

import numpy as np

# Features to use
feature_cols = ['EMA20', 'MACD', 'MOM_6', 'RSI', 'ATR']
sequence_length = 22

# Convert data to numpy arrays
features = df[feature_cols].values
labels = df['label'].values

X = []
y = []

for i in range(sequence_length, len(df)):
    X.append(features[i-sequence_length:i])  # 22 x 5
    y.append(labels[i])  # label at day i

X = np.array(X)
y = np.array(y)

print("Input shape:", X.shape)  # should be (samples, 22, 5)
print("Label shape:", y.shape)

from sklearn.model_selection import train_test_split

# Split into training and test sets
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, shuffle=False)  # No shuffle for time series

print("Training samples:", X_train.shape[0])
print("Testing samples:", X_test.shape[0])

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv1D, MaxPooling1D, Flatten, Dense, Dropout

# Build CNN
model = Sequential([
    Conv1D(64, kernel_size=3, activation='relu', input_shape=(22, 5)),
    MaxPooling1D(pool_size=2),
    Conv1D(32, kernel_size=3, activation='relu'),
    Flatten(),
    Dense(64, activation='relu'),
    Dropout(0.3),
    Dense(4, activation='softmax')  # 4-class classificationn
])

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model.summary()

history = model.fit(X_train, y_train, epochs=20, batch_size=16, validation_split=0.2)

model.save("cnn_price_trend_model.h5")

from google.colab import files

# Download the trained model file to your local machine
files.download("cnn_price_trend_model.h5")

import os

# Create folders if they don't exist
os.makedirs("model", exist_ok=True)
os.makedirs("data", exist_ok=True)
os.makedirs("backtest", exist_ok=True)

import shutil

shutil.move("cnn_price_trend_model.h5", "model/cnn_price_trend_model.h5")

import os
print(os.listdir("model"))

from google.colab import drive
drive.mount('/content/drive')

model.save("/content/drive/MyDrive/QR_Intern/cnn_price_trend_model.h5")

df.to_csv("/content/drive/MyDrive/QR_Intern/data.csv", index=False)