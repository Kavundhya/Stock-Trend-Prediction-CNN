# -*- coding: utf-8 -*-
"""backtesting.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1S9t1Vu9GoahntO7c3JE6wgfBFB4XnEBf

## **Mount Google Drive**
"""

from google.colab import drive
drive.mount('/content/drive')

from tensorflow.keras.models import load_model
model = load_model("/content/drive/MyDrive/QR_Intern/cnn_price_trend_model.h5")

import os

BASE_DIR = "/content/drive/MyDrive/QR_Intern"
os.makedirs(BASE_DIR, exist_ok=True)

"""# **Load Data**"""

import pandas as pd

df = pd.read_csv(f"{BASE_DIR}/data.csv", parse_dates=["Date"])

"""# **Load the Trained Model**"""

from tensorflow.keras.models import load_model

model_path = f"{BASE_DIR}/cnn_price_trend_model.h5"
model = load_model(model_path)

"""# **Prepare Backtesting Data Format**"""

bt_df = df[['Date', 'Open', 'High', 'Low', 'Close', 'Volume']].copy()
bt_df['EMA20'] = df['EMA20'].values
bt_df['MACD'] = df['MACD'].values
bt_df['MOM_6'] = df['MOM_6'].values
bt_df['RSI'] = df['RSI'].values
bt_df['ATR'] = df['ATR'].values

bt_df.set_index('Date', inplace=True)

"""# **Define Strategy**"""

# -*- coding: utf-8 -*-
"""Backtesting Script for Stock Trend Prediction"""

# 1. Install required packages
import subprocess
import sys
def install(package):
    subprocess.check_call([sys.executable, "-m", "pip", "install", package])

try:
    from backtesting import Strategy, Backtest
except ImportError:
    install('backtesting')
    from backtesting import Strategy, Backtest

import pandas as pd
import numpy as np
from tensorflow.keras.models import load_model

# 2. Suppress unnecessary warnings
import warnings
warnings.filterwarnings('ignore', category=UserWarning, module='backtesting._plotting')
warnings.filterwarnings('ignore', category=UserWarning, module='absl')

# 3. Load data and model
BASE_DIR = "/content/drive/MyDrive/QR_Intern"
try:
    model = load_model(f"{BASE_DIR}/cnn_price_trend_model.h5")
    df = pd.read_csv(f"{BASE_DIR}/data.csv", parse_dates=["Date"], index_col="Date")
except Exception as e:
    print(f"Error loading files: {e}")
    raise

# 4. Define Strategy
class SlopeDetectionStrategy(Strategy):
    window = 22  # As per research paper
    confidence_thresh = 0.65  # Min probability to trade

    def init(self):
        self.model = model
        # Commission is now set in Backtest() initialization

    def next(self):
        if len(self.data) < self.window:
            return

        # Prepare input tensor
        X = np.column_stack([
            self.data.EMA20[-self.window:],
            self.data.MACD[-self.window:],
            self.data.MOM_6[-self.window:],
            self.data.RSI[-self.window:],
            self.data.ATR[-self.window:]
        ]).reshape(1, self.window, 5)

        # Get prediction
        pred = self.model.predict(X, verbose=0)[0]
        label = np.argmax(pred)
        confidence = np.max(pred)

        # Trading rules (4-class)
        if confidence > self.confidence_thresh:
            if label in [2, 3]:  # rise or rise-plus
                if not self.position:
                    self.buy(size=0.5)  # Risk management
            elif label in [0, 1]:  # fall or fall-plus
                if self.position:
                    self.position.close()

# 5. Run backtest
bt = Backtest(
    df,
    SlopeDetectionStrategy,
    cash=10000,
    commission=0.002,
    exclusive_orders=True,
    trade_on_close=True
)

stats = bt.run()
print(stats)
bt.plot()

"""# **Save Results to CSV**"""

# 6. Save results
stats_df = pd.DataFrame([stats])
try:
    stats_df.to_csv(f"{BASE_DIR}/backtest_results.csv", index=False)
    print(f"Results saved to {BASE_DIR}/backtest_results.csv")
except Exception as e:
    print(f"Error saving results: {e}")